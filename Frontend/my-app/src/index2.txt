import React, { useState } from "react";
import TeacherPanel from "./components/TeacherPanel";
import StudentPanel from "./components/StudentPanel";
import { SparklesIcon } from "@heroicons/react/24/solid";

export default function App() {
  const [role, setRole] = useState("");
  const [confirmedRole, setConfirmedRole] = useState("");

  if (confirmedRole) {
    return confirmedRole === "teacher" ? <TeacherPanel /> : <StudentPanel />;
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-white text-center px-4">
      <div className="bg-gradient-to-r from-[#7565D9] to-[#4D0ACD] text-white px-4 py-1 rounded-full mb-6 text-sm font-medium shadow flex items-center gap-1">
  <SparklesIcon className="w-4 h-4 text-white" />
  Intervue Poll
</div>

      {/* Heading */}
      <h1 className="text-4xl md:text-5xl mb-4 font-normal leading-tight">
        Welcome to the <span className="font-bold text-black">Live Polling</span>
        <br />
        <span className="font-bold text-black">System</span>
      </h1>

      {/* Subtitle */}
      <p className="text-gray-500 mb-8 max-w-md text-base md:text-lg">
        Please select the role that best describes you to begin using the live
        polling system
      </p>

      {/* Role options */}
      <div className="flex flex-col md:flex-row gap-4 mb-8">
        <div
          onClick={() => setRole("student")}
          className={`cursor-pointer border rounded-lg p-6 w-64 text-left transition ${
            role === "student"
              ? "border-[#4D0ACD] shadow-lg"
              : "hover:border-[#7565D9]"
          }`}
        >
          <h2 className="font-bold text-lg mb-1">Iâ€™m a Student</h2>
          <p className="text-gray-600 text-sm">
            Participate in live polls and see how your responses compare
          </p>
        </div>

        <div
          onClick={() => setRole("teacher")}
          className={`cursor-pointer border rounded-lg p-6 w-64 text-left transition ${
            role === "teacher"
              ? "border-[#4D0ACD] shadow-lg"
              : "hover:border-[#7565D9]"
          }`}
        >
          <h2 className="font-bold text-lg mb-1">Iâ€™m a Teacher</h2>
          <p className="text-gray-600 text-sm">
            Submit answers and view live poll results in real-time.
          </p>
        </div>
      </div>

      {/* Continue button */}
      <button
        disabled={!role}
        onClick={() => setConfirmedRole(role)}
        className={`px-10 py-3 rounded-full shadow transition 
          ${
            role
              ? "bg-gradient-to-r from-[#7565D9] to-[#4D0ACD] text-white hover:opacity-90"
              : "bg-gray-300 text-white cursor-not-allowed"
          }`}
      >
        Continue
      </button>
    </div>
  );
}
import React, { useState, useEffect } from "react";
import { io } from "socket.io-client";
import ChatBox from "./ChatBox";
import PollResults from "./PollResults";
import { SparklesIcon } from "@heroicons/react/24/solid";

const socket = io(import.meta.env.VITE_BACKEND_URL || "http://localhost:3001");

export default function StudentPanel() {
  const [name, setName] = useState("");
  const [question, setQuestion] = useState(null);
  const [results, setResults] = useState({});
  const [voted, setVoted] = useState(false);
  const [chatOpen, setChatOpen] = useState(false);
  const [submitted, setSubmitted] = useState(false);

  useEffect(() => {
    const savedName = sessionStorage.getItem("studentName");
    if (savedName) {
      setName(savedName);
      socket.emit("student-set-name", { name: savedName });
      setSubmitted(true);
    }
  }, []);

  useEffect(() => {
    socket.on("new-question", (q) => {
      setQuestion(q);
      setResults({});
      setVoted(false);
    });

    socket.on("polling-results", (res) => {
      setResults(res);
    });

    return () => {
      socket.off("new-question");
      socket.off("polling-results");
    };
  }, []);

  const handleVote = (option) => {
    if (!voted) {
      socket.emit("handle-polling", { option });
      setVoted(true);
    }
  };

  const handleSetName = () => {
    if (name.trim()) {
      sessionStorage.setItem("studentName", name);
      socket.emit("student-set-name", { name });
      setSubmitted(true);
    } else {
      alert("Please enter your name.");
    }
  };

  const isNameEntered = name.trim().length > 0;

  return (
    <div className="flex flex-col items-center justify-center min-h-screen px-6 relative">
      {!submitted ? (
        <div className="max-w-md w-full text-center">
          <div className="bg-gradient-to-r from-[#7565D9] to-[#4D0ACD] text-white px-4 py-1 rounded-full mb-6 text-sm font-medium shadow inline-flex items-center gap-1">
            <SparklesIcon className="w-4 h-4 text-white" /> Intervue Poll
          </div>

          <h1 className="text-3xl mb-2">
            Letâ€™s <span className="font-bold">Get Started</span>
          </h1>

          <p className="text-gray-600 mb-6 text-sm">
            If you're a student, you'll be able to <b>submit your answers</b>, participate in live polls, and see how your responses compare with your classmates.
          </p>

          <label className="block text-left text-gray-700 mb-2">Enter your Name</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full bg-gray-100 border border-gray-200 rounded-lg px-3 py-3 mb-4 text-gray-700 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="Enter your name"
          />

          <button
            onClick={handleSetName}
            disabled={!isNameEntered}
            className={`px-6 py-2 rounded-full font-semibold shadow transition ${
              isNameEntered
                ? "bg-purple-700 text-white hover:bg-purple-800"
                : "bg-purple-300 text-white cursor-not-allowed"
            }`}
          >
            Continue
          </button>
        </div>
      ) : !question ? (
        <div className="flex flex-col items-center justify-center h-screen text-center">
          <div className="bg-gradient-to-r from-[#7565D9] to-[#4D0ACD] text-white px-4 py-1 rounded-full mb-6 text-sm font-medium shadow inline-flex items-center gap-1">
            <SparklesIcon className="w-4 h-4 text-white" /> Intervue Poll
          </div>

          {/* Exact Spinner Style */}
          <div className="mb-6">
            <div
              className="w-12 h-12 rounded-full border-4 border-purple-600 border-r-transparent animate-spin"
              style={{ borderRightColor: "transparent" }}
            ></div>
          </div>

          <p className="text-lg font-bold text-gray-750">
            Wait for the teacher to ask questions...
          </p>
        </div>
      ) : (
        <div className="w-full max-w-lg">
          <h2 className="text-xl mb-4 font-semibold">Welcome {name} ðŸ‘‹</h2>
          <div className="mb-4">
            <h3 className="font-bold mb-2">{question.question}</h3>
            {question.options.map((opt, i) => (
              <button
                key={i}
                onClick={() => handleVote(opt)}
                disabled={voted}
                className={`block px-3 py-2 rounded mt-2 w-full text-white ${
                  voted ? "bg-gray-400" : "bg-blue-500 hover:bg-blue-600"
                }`}
              >
                {opt}
              </button>
            ))}
          </div>
          <PollResults results={results} />
        </div>
      )}

      <button
        onClick={() => setChatOpen(!chatOpen)}
        className="fixed bottom-6 right-6 bg-indigo-600 text-white text-2xl p-4 rounded-full shadow-lg hover:bg-indigo-700 transition"
      >
        ðŸ’¬
      </button>

      {chatOpen && (
        <div className="fixed bottom-20 right-6 w-80 h-96 bg-white shadow-xl rounded-lg border flex flex-col">
          <div className="bg-indigo-600 text-white px-4 py-2 rounded-t-lg font-semibold">
            Chat Support
          </div>
          <div className="flex-1 overflow-y-auto">
            <ChatBox socket={socket} />
          </div>
        </div>
      )}
    </div>
  );
}

import React, { useState, useEffect } from "react";
import { io } from "socket.io-client";
import ChatBox from "./ChatBox";
import PollResults from "./PollResults";
import { FaPlus, FaEye, FaCommentDots } from "react-icons/fa";

const socket = io(import.meta.env.VITE_BACKEND_URL || "http://localhost:3001");

export default function TeacherPanel() {
  const [question, setQuestion] = useState("");
  const [options, setOptions] = useState([
    { text: "", isCorrect: false },
    { text: "", isCorrect: false },
  ]);
  const [timer, setTimer] = useState(60);
  const [results, setResults] = useState({});
  const [showChat, setShowChat] = useState(false);

  const handleSendQuestion = () => {
    const optionTexts = options.map((opt) => opt.text);
    socket.emit("teacher-ask-question", {
      question,
      options: optionTexts,
      timer,
      correctAnswers: options.map((opt) => opt.isCorrect),
    });
    setQuestion("");
    setOptions([
      { text: "", isCorrect: false },
      { text: "", isCorrect: false },
    ]);
  };

  useEffect(() => {
    socket.on("polling-results", (res) => {
      setResults(res);
    });
    return () => {
      socket.off("polling-results");
    };
  }, []);

  return (
    <div className="p-6 max-w-2xl mx-auto font-sans">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <button className="bg-purple-600 text-white px-4 py-2 rounded flex items-center gap-2">
          <FaPlus /> Intervue Poll
        </button>
        <button className="bg-purple-600 text-white px-4 py-2 rounded flex items-center gap-2">
          <FaEye /> View Poll History
        </button>
      </div>

      {/* Title & Description */}
      <h2 className="text-2xl font-bold mb-2 text-gray-800">Let's Get Started</h2>
      <p className="mb-6 text-gray-600">
        You'll have the ability to create and manage polls, ask questions, and monitor your students' responses in real-time.
      </p>

      {/* Question Input with Timer */}
      <div className="mb-4">
        <div className="flex justify-between items-center mb-1">
          <label className="font-semibold">Enter your question</label>
          <div className="relative w-40">
            <select
              value={timer}
              onChange={(e) => setTimer(Number(e.target.value))}
              className="appearance-none bg-gray-100 border px-3 py-2 rounded w-full pr-10 text-sm"
            >
              {[30, 45, 60, 90, 120].map((t) => (
                <option key={t} value={t}>
                  {t} seconds
                </option>
              ))}
            </select>

            {/* Custom purple triangle icon */}
            <div className="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none">
              <svg width="14" height="10" viewBox="0 0 10 6" xmlns="http://www.w3.org/2000/svg">
                <polygon points="0,0 10,0 5,6" fill="#6b21a8" />
              </svg>
            </div>
          </div>
        </div>

        <textarea
          placeholder="Enter your question here..."
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          className="bg-gray-100 border px-3 py-3 rounded w-full h-20 resize-none"
          maxLength={200}
        />
        <div className="text-right text-sm text-gray-500 mt-1">
          {question.length}/200
        </div>
      </div>

      {/* Edit Options Section */}
      <div className="flex justify-between items-center mb-2">
        <label className="font-semibold">Edit Options</label>
        <label className="font-semibold">Is it Correct?</label>
      </div>

      {/* Options Inputs */}
      {options.map((opt, i) => (
        <div key={i} className="flex items-center gap-4 mb-2">
          <input
            type="text"
            placeholder={`Option ${i + 1}`}
            value={opt.text}
            onChange={(e) => {
              const newOptions = [...options];
              newOptions[i].text = e.target.value;
              setOptions(newOptions);
            }}
            className="bg-gray-100 border px-3 py-2 rounded flex-grow"
          />
          <div className="flex gap-4 items-center">
            <label className="flex items-center gap-1">
              <input
                type="radio"
                checked={opt.isCorrect}
                onChange={() => {
                  const newOptions = options.map((o, index) => ({
                    ...o,
                    isCorrect: index === i,
                  }));
                  setOptions(newOptions);
                }}
              />
              Yes
            </label>
            <label className="flex items-center gap-1">
              <input
                type="radio"
                checked={!opt.isCorrect}
                onChange={() => {
                  const newOptions = [...options];
                  newOptions[i].isCorrect = false;
                  setOptions(newOptions);
                }}
              />
              No
            </label>
          </div>
        </div>
      ))}

      {/* Add Option Button */}
      <button
        onClick={() => setOptions([...options, { text: "", isCorrect: false }])}
        className="bg-white border border-purple-600 text-purple-600 px-4 py-2 rounded mb-6 flex items-center gap-2"
      >
        <FaPlus /> Add More Option
      </button>

      {/* Submit Button aligned right */}
      <div className="flex justify-end mb-6">
        <button
          onClick={handleSendQuestion}
          className="bg-purple-600 text-white px-4 py-2 rounded-full text-sm font-semibold"
        >
          Ask Question
        </button>
      </div>

      {/* Results & Chat */}
      <PollResults results={results} />
      <div className="fixed bottom-4 right-4">
        <button
          onClick={() => setShowChat(!showChat)}
          className="bg-purple-600 text-white p-3 rounded-full shadow-lg"
        >
          <FaCommentDots />
        </button>
        {showChat && <ChatBox socket={socket} />}
      </div>
    </div>
  );
}

import React, { useState, useEffect } from "react";

export default function ChatBox({ socket }) {
  const [messages, setMessages] = useState([]);
  const [msg, setMsg] = useState("");
  const [sender, setSender] = useState("Anonymous");

  useEffect(() => {
    socket.on("receive-chat-message", (message) => {
      setMessages((prev) => [...prev, message]);
    });

    return () => {
      socket.off("receive-chat-message");
    };
  }, [socket]);

  const sendMessage = () => {
    if (msg.trim()) {
      socket.emit("send-chat-message", { sender, message: msg });
      setMsg("");
    }
  };

  return (
    <div className="mt-6 border p-3 rounded">
      <h3 className="font-bold mb-2">ðŸ’¬ Chat</h3>
      <div className="h-40 overflow-y-auto border p-2 mb-2 bg-gray-50">
        {messages.map((m, i) => (
          <div key={i}>
            <b>{m.sender}:</b> {m.message}
          </div>
        ))}
      </div>
      <input
        type="text"
        placeholder="Your name"
        value={sender}
        onChange={(e) => setSender(e.target.value)}
        className="border px-2 py-1 mr-2"
      />
      <input
        type="text"
        value={msg}
        onChange={(e) => setMsg(e.target.value)}
        className="border px-2 py-1 mr-2 w-1/2"
      />
      <button
        onClick={sendMessage}
        className="bg-blue-500 text-white px-3 py-1 rounded"
      >
        Send
      </button>
    </div>
  );
}
